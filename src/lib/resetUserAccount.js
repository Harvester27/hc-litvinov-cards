// üîÑ RESET U≈ΩIVATELSK√âHO √öƒåTU PRO TESTOV√ÅN√ç
// Tento skript kompletnƒõ resetuje √∫ƒçet na v√Ωchoz√≠ hodnoty

import { 
  doc, 
  deleteDoc, 
  setDoc, 
  collection, 
  getDocs, 
  query, 
  where,
  serverTimestamp 
} from 'firebase/firestore';
import { 
  deleteUser,
  signOut,
  createUserWithEmailAndPassword,
  sendEmailVerification
} from 'firebase/auth';
import { db, auth } from './firebase';

// ========================================
// RESET FUNKC√ç
// ========================================

/**
 * Kompletn√≠ reset √∫ƒçtu - sma≈æe v≈°echna data a umo≈æn√≠ novou registraci
 * @param {string} email - Email √∫ƒçtu k resetu
 * @param {string} password - Heslo pro ovƒõ≈ôen√≠ vlastnictv√≠
 */
export const completeAccountReset = async (email, password) => {
  try {
    console.log('üîÑ Zaƒç√≠n√°m reset √∫ƒçtu:', email);
    
    // 1. P≈ôihl√°sit se k √∫ƒçtu (ovƒõ≈ôen√≠ vlastnictv√≠)
    const { signInWithEmailAndPassword } = await import('firebase/auth');
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    const uid = user.uid;
    
    console.log('‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©, UID:', uid);
    
    // 2. Smazat v≈°echna data z Firestore
    await deleteAllUserData(uid);
    
    // 3. Odhl√°sit u≈æivatele
    await signOut(auth);
    console.log('‚úÖ U≈æivatel odhl√°≈°en');
    
    // 4. Smazat √∫ƒçet z Authentication
    await deleteUser(user);
    console.log('‚úÖ √öƒçet smaz√°n z Authentication');
    
    return {
      success: true,
      message: '√öƒçet byl kompletnƒõ resetov√°n. Nyn√≠ se m≈Ø≈æete znovu zaregistrovat.'
    };
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi resetu √∫ƒçtu:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Soft reset - zachov√° √∫ƒçet ale resetuje v≈°echna data
 * @param {string} uid - User ID
 */
export const softResetAccount = async (uid) => {
  try {
    console.log('üîÑ Soft reset pro UID:', uid);
    
    // Smazat star√° data
    await deleteAllUserData(uid);
    
    // Vytvo≈ôit nov√Ω profil s v√Ωchoz√≠mi hodnotami
    const defaultProfile = {
      displayName: `Hr√°ƒç${Math.floor(Math.random() * 9999)}`,
      avatar: null,
      level: 1,
      xp: 0,
      credits: 12000,
      collectedCards: [],
      totalQuizzesCompleted: 0,
      pendingRewards: 0,
      createdAt: serverTimestamp(),
      lastLogin: serverTimestamp()
    };
    
    await setDoc(doc(db, 'users', uid, 'profile', 'data'), defaultProfile);
    
    console.log('‚úÖ Data resetov√°na na v√Ωchoz√≠ hodnoty');
    
    return {
      success: true,
      profile: defaultProfile
    };
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi soft resetu:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Smazat v≈°echna data u≈æivatele z Firestore
 * @param {string} uid - User ID
 */
const deleteAllUserData = async (uid) => {
  console.log('üóëÔ∏è Ma≈æu data pro UID:', uid);
  
  try {
    // Smazat profil
    const profileRef = doc(db, 'users', uid, 'profile', 'data');
    await deleteDoc(profileRef);
    console.log('‚úÖ Profil smaz√°n');
    
    // Smazat dokonƒçen√© kv√≠zy
    const quizzesRef = collection(db, 'users', uid, 'completedQuizzes');
    const quizzesSnapshot = await getDocs(quizzesRef);
    for (const doc of quizzesSnapshot.docs) {
      await deleteDoc(doc.ref);
    }
    console.log(`‚úÖ Smaz√°no ${quizzesSnapshot.size} kv√≠z≈Ø`);
    
    // Smazat karty
    const cardsRef = collection(db, 'users', uid, 'cards');
    const cardsSnapshot = await getDocs(cardsRef);
    for (const doc of cardsSnapshot.docs) {
      await deleteDoc(doc.ref);
    }
    console.log(`‚úÖ Smaz√°no ${cardsSnapshot.size} karet`);
    
    // Smazat √∫spƒõchy
    const achievementsRef = collection(db, 'users', uid, 'achievements');
    const achievementsSnapshot = await getDocs(achievementsRef);
    for (const doc of achievementsSnapshot.docs) {
      await deleteDoc(doc.ref);
    }
    console.log(`‚úÖ Smaz√°no ${achievementsSnapshot.size} √∫spƒõch≈Ø`);
    
    // Smazat hlavn√≠ dokument u≈æivatele (pokud existuje)
    const userDocRef = doc(db, 'users', uid);
    await deleteDoc(userDocRef);
    console.log('‚úÖ Hlavn√≠ dokument u≈æivatele smaz√°n');
    
  } catch (error) {
    console.error('‚ö†Ô∏è Chyba p≈ôi maz√°n√≠ dat:', error);
    // Pokraƒçovat i kdy≈æ nƒõkter√© dokumenty neexistuj√≠
  }
};

// ========================================
// POMOCN√â FUNKCE PRO TESTOV√ÅN√ç
// ========================================

/**
 * Z√≠skat informace o √∫ƒçtu
 * @param {string} email - Email √∫ƒçtu
 */
export const getAccountInfo = async (email) => {
  try {
    const user = auth.currentUser;
    
    if (!user || user.email !== email) {
      return {
        exists: false,
        message: 'U≈æivatel nen√≠ p≈ôihl√°≈°en nebo email nesouhlas√≠'
      };
    }
    
    const uid = user.uid;
    const profileRef = doc(db, 'users', uid, 'profile', 'data');
    const profileDoc = await getDoc(profileRef);
    
    if (!profileDoc.exists()) {
      return {
        exists: true,
        uid: uid,
        email: email,
        profile: null,
        message: '√öƒçet existuje ale nem√° profil'
      };
    }
    
    return {
      exists: true,
      uid: uid,
      email: email,
      profile: profileDoc.data(),
      emailVerified: user.emailVerified
    };
    
  } catch (error) {
    console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠:', error);
    return {
      exists: false,
      error: error.message
    };
  }
};

/**
 * Admin reset - pouze pro v√Ωvoj√°≈ôe (vy≈æaduje admin SDK)
 * POZN√ÅMKA: Toto funguje pouze na backendu s admin SDK
 */
export const adminResetAccount = async (email) => {
  console.warn('‚ö†Ô∏è Admin reset vy≈æaduje backend s Firebase Admin SDK');
  console.warn('Pro testov√°n√≠ pou≈æijte completeAccountReset() nebo softResetAccount()');
  
  return {
    success: false,
    message: 'Admin reset nen√≠ dostupn√Ω z frontendu. Pou≈æijte completeAccountReset().'
  };
};